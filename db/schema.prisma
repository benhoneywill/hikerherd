// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

// ***** User *****

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  username String  @unique
  avatar   String? @unique

  packs Pack[]
  gear  Gear[]

  hashedPassword String?
  role           UserRole   @default(USER)
  tokens         Token[]
  sessions       Session[]
  Category       Category[]
}

// ***** Auth *****

model Session {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// ***** Gear ***** //

model Gear {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  imageUrl   String?
  link       String?
  notes      String?
  consumable Boolean
  weight     Int
  price      Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  clonedFromId String?
  clonedFrom   Gear?   @relation("ClonedFrom", fields: [clonedFromId], references: [id])
  clones       Gear[]  @relation("ClonedFrom")

  packCategoryItems PackCategoryItem[]
  categoryItems     CategoryItem[]
}

enum CategoryType {
  INVENTORY
  WISH_LIST
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  index Int
  type  CategoryType

  user   User   @relation(fields: [userId], references: [id])
  userId String

  items CategoryItem[]
}

model CategoryItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  index Int

  gear   Gear   @relation(fields: [gearId], references: [id])
  gearId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

// ***** Pack *****

model Pack {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  slug    String  @unique
  notes   String?
  private Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  categories PackCategory[]
}

model PackCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  index Int

  pack   Pack   @relation(fields: [packId], references: [id])
  packId String

  items PackCategoryItem[]
}

model PackCategoryItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  index Int
  notes String?
  worn  Boolean

  category   PackCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  gear   Gear   @relation(fields: [gearId], references: [id])
  gearId String @unique
}
