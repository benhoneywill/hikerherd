// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum TokenType {
  RESET_PASSWORD
}

enum UserRole {
  ADMIN
  USER
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  username       String   @unique
  avatar         String?  @unique
  hashedPassword String?
  role           UserRole @default(USER)

  tokens   Token[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     String?
  publishedAt DateTime?

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentComment Comment? @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentPost    Post?    @relation(fields: [parentPostId], references: [id])

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  parentCommentId String?
  parentPostId    String?

  replies Comment[] @relation("CommentToComment")
}
