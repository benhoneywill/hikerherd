// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  username       String   @unique
  avatar         String?  @unique
  hashedPassword String?
  role           UserRole @default(USER)

  tokens    Token[]
  sessions  Session[]
  posts     Post[]
  comments  Comment[]
  blogPosts BlogPost[]
  blogs     BlogUser[]
}

// --------------------------------------

model Session {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

// --------------------------------------

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// --------------------------------------

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

// --------------------------------------

enum BlogUserRole {
  ADMIN
  MEMBER
}

model Blog {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users BlogUser[]
  posts BlogPost[]
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     String
  publishedAt DateTime?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String
}

model BlogUser {
  blog   Blog         @relation(fields: [blogId], references: [id])
  blogId String
  user   User         @relation(fields: [userId], references: [id])
  userId String
  role   BlogUserRole

  @@id([blogId, userId])
}

// --------------------------------------

enum CommentRootType {
  POST
  BLOG_POST
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  parentId String?

  rootId   String
  rootType CommentRootType

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  replies Comment[] @relation("CommentToComment")

  @@index([rootId, rootType, parentId])
}
